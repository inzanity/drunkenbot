1.	Architecture
<img src="images/packages.png" alt="Package diagram">
<small>Package diagram</small>

1.1	Animations
All drawing is done using animation classes. The game doesn't contain any dynamic animations, that is, there is no interaction between animations and the environment. For example, particle effects will not be affected by the wind, and no holes are generated to the terrain from explosions. Therefore animation interface remains very simple, and animations are independent from the other components.

1.1.1	Animation classes
All animation classes derives from IAnimation, which defines the interface for drawing, restoring and releasing animation. It also defines getters for duration and bounding box of the animation. There are two basic animation classes, CMeshAnimation and CParticleSystem. CAnimCombination class can be used to combinate multiple animations. Special animations are used for sky box and height map (see 1.2.1).

CMeshAnimation contains animation loaded from Microsoft .x file. It can be non-animated mesh or skinned mesh. However, only one skinning animation can be played at the time.

CParticleSystem contains animated particle effect. Positions, colors and sizes of the particles are defined in keyframe sequences. Particle system interpolates between keyframes. If more than two position keyframes are specified, Catmull-Rom interpolation is used. Otherwise linear interpolation is used.

CAnimCombination reads animation information from a text file. Number of animations is at the beginning of the file. After that there is name, starting time, ending time and optional transformation matrix for each animation. This class can be used to combine animations (for example, add smoke to pipe) or to play animations in sequences (for example blinking light).

1.1.2	CAnimationStorage
Animation storage is used to load and access animations. This way each animation and texture will be loaded only once. It can be used to restore all animations, in case they are lost (see "Lost Devices" from DirectX SDK documentation).

1.1.3	CParticleSystemLoader
Particle systems are loaded from Lua files (see http://www.lua.org) using CParticleSystemLoader. File contains properties of the system, as well as script to initialize keyframes. See TODO ParticleEditor.

1.2	Game objects

1.2.1	Collision detection

1.2.2	Drawable objects

1.2.3	CMech

1.2.4	CBuilding

1.3	Message system

1.3.1	Storing game objects

1.3.2	Messages

1.4	Data storagers

1.5	Artificial intelligence

1.5.1	Pathfinding

1.5.2	Mech AI

1.5.3	Strategic AI

1.5.4	Terrain analysis

1.5.5	Scripting

1.6	Utility classes

1.7	Other components

1.7.1	User interface